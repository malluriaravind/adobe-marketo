name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  TF_VERSION: "1.1.0"
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  terraform:
    name: "Terraform Infrastructure Deployment"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Configure AWS Credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.WORKFLOWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Terraform Init
        working-directory: terraform
        run: terraform init
      - name: Terraform Apply
        working-directory: terraform
        env:
          TF_VAR_database_url:       ${{ secrets.DATABASE_URL }}
          TF_VAR_cognito_user_pool_id: ${{ secrets.COGNITO_USER_POOL_ID }}
          TF_VAR_cognito_client_id:    ${{ secrets.COGNITO_CLIENT_ID }}
        run: |
          terraform plan
          terraform apply -auto-approve

  build-and-push:
    name: "Build and Push Docker Images"
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build and Push Backend Docker Image
        env:
          ECR_REPO: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.BACKEND_ECR_REPO }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REPO:$IMAGE_TAG -f backend/Dockerfile .
          docker push $ECR_REPO:$IMAGE_TAG
          
      - name: Build and Push Frontend Docker Image
        env:
          ECR_REPO: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.FRONTEND_ECR_REPO }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REPO:$IMAGE_TAG -f frontend/Dockerfile .
          docker push $ECR_REPO:$IMAGE_TAG

  deploy:
    name: "Deploy to EKS via Helm"
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - uses: actions/checkout@v2
      
      - name: Configure kubectl for EKS
        uses: aws-actions/eks-setup-kubectl@v1
        with:
          cluster-name: ${{ secrets.EKS_CLUSTER_NAME }}
          region: ${{ secrets.AWS_REGION }}
      
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      
      - name: Install Ingress Controller
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx --create-namespace \
            --wait --timeout 300s
      
      - name: Deploy Application with Helm
        run: |
          helm upgrade --install my-app helm/my-app \
            --namespace my-app --create-namespace \
            --set image.backend.repository=${{ secrets.BACKEND_ECR_REPO }} \
            --set image.frontend.repository=${{ secrets.FRONTEND_ECR_REPO }} \
            --set image.backend.tag=latest \
            --set image.frontend.tag=latest \
            --wait --timeout 300s 