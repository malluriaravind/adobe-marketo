name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/*'
  pull_request:
    branches: [ main ]

env:
  TF_VERSION: "1.6.6"                    
  AWS_REGION: "us-west-1" 

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: Terraform Infrastructure Deployment
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::511027370166:role/adobe-marketo"
          aws-region: "us-west-1"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: terraform
        run: terraform init -input=false -no-color

      - name: Terraform Plan
        id: plan
        working-directory: terraform
        env:
          TF_VAR_database_url:        ${{ secrets.DATABASE_URL }}
          TF_VAR_cognito_user_pool_id: ${{ secrets.COGNITO_USER_POOL_ID }}
          TF_VAR_cognito_client_id:    ${{ secrets.COGNITO_CLIENT_ID }}
        run: terraform plan -input=false -no-color -out=tfplan

      - name: Terraform Apply (main only)
        if: github.ref == 'refs/heads/main'
        working-directory: terraform
        run: terraform apply -input=false -no-color -auto-approve tfplan

      - name: Upload tfplan artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: terraform/tfplan

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::511027370166:role/adobe-marketo"
          aws-region: "us-west-1"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push backend image
        run: |
          BACKEND_REPO=${{ steps.login-ecr.outputs.registry }}/adobe-marketo-backend
          docker build -t $BACKEND_REPO:latest -f backend/Dockerfile backend
          docker push $BACKEND_REPO:latest

      - name: Build & push frontend image
        run: |
          FRONTEND_REPO=${{ steps.login-ecr.outputs.registry }}/adobe-marketo-frontend
          docker build -t $FRONTEND_REPO:latest -f frontend/Dockerfile frontend
          docker push $FRONTEND_REPO:latest

  deploy:
    name: Deploy to EKS via Helm
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::511027370166:role/adobe-marketo"
          aws-region: "us-west-1"

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name  ${{ secrets.EKS_CLUSTER_NAME }} --region ${AWS_REGION}

      - name: Deploy application
        run: |
          kubectl create namespace my-app --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -f k8s/backend.yaml
          kubectl apply -f k8s/frontend.yaml
